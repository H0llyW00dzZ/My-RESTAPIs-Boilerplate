# Build and Push Docker Image to Private Registry by H0llyW00dzZ
#
# Note: This is a boilerplate CI/CD. You need to modify the registry "example.com".
# Also note that this is different from "gcloud-builds.yaml" because "gcloud-builds.yaml" involves remote builds, 
# which means you must monitor the build until it completes. If you terminate the process during a build using "gcloud-builds.yaml", it will cancel the build.
#
# Compatibility:
# This supports any Git code hosting platform. For example, it works with Gitea, which I personally use for GitOps, DevOps, and DevSecOps on my Kubernetes cluster (e.g., https://git.b0zal.io).
# However, if you are using GitHub with a private repository, you need to modify this CI/CD process by removing the cache after building.
# It also supports any private registry implementation. For example, if you want to manage your own private registry, it is supported.
#
# Weird Bug (HVM):
# For multiple build architectures, this CI/CD is stable only with KVM, not HVM.
# Using HVM can cause significant overhead. For example, on HVM with 16 vCPUs and 32GB RAM, the build could take over an hour or 1 year maybe ?
# However, on a lower-spec HVM with 4 vCPUs and 4GB RAM, it only took 10 minutes.
#
# Additionally, for manual builds with multiple architectures (non-CI/CD):
# On Windows with the Hyper-V hypervisor + WSL 2, it is considered stable.
# It took 9 minutes for ARM64 and 53 seconds for AMD64, unlike on HVM, where the overhead is high even on high-spec systems.
# Tested on an Intel(R) Core(TM) i9-10980HK CPU @ 2.40GHz (Laptop) without overclocking.
#
# Note that the Weird Bug (HVM) occurs on high-spec systems with 16 vCPUs and 32GB RAM, taking over an hour for multiple build architectures (AMD64 & ARM64).
# The issue is intermittent and not due to resource exhaustion, as there is only one runner.
#
# Tips:
# For runners on Kubernetes, you need to build the container from this repository: https://git.b0zal.io/H0llyW00dzZ/act_runner (a mirror of https://gitea.com/gitea/act_runner.git).
# If you're unsure how to build the container for the runner, it's better to use a VM/KVM. If you're on bare metal, it's recommended to use a VM/KVM as well.
#
# For example, if the runner from https://git.b0zal.io/H0llyW00dzZ/act_runner (a mirror of https://gitea.com/gitea/act_runner.git) is running on a VM/KVM (typical bare metal),
# you can simply install it and run it in a screen session (tty). However, if the runners are on Kubernetes, it's much easier; you can specify a node selector and set it to a stateful deployment.
#
# Security Considerations:
# Whether Gitea runners are on Kubernetes or VM/KVM (typical bare metal), the risk is low because you control the privileges.
# The runner itself is also secure because it automatically clears everything after completing jobs.
# This is unlike GitHub CI/CD, where you may need to manually clear items, such as Docker build caches.
#
# Warning:
# Never modify this CI/CD boilerplate with hardcoded commands using "run" Hardcoding in CI/CD indicates poor GitOps, DevOps, and DevSecOps practices.
name: Build and Push Docker Image to Private Registry

on:
  push:
    tags:
      - 'v*'  # Trigger only on version tags

jobs:
  build:
    # Note: With Gitea runners, you have the freedom to customize "runs-on" allowing you to build a secure environment.
    # This is unlike other CI/CD mechanisms.
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

        # Note: QEMU is optional unless you want to experiment with other architectures.
        # The default architectures are linux/amd64 and linux/arm64 (multi-architecture).
        # Multi-architecture builds work properly only on KVM. On HVM, it can cause significant overhead during building 
        # (e.g., builds might take 1 year hahaha).
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Private Registry
        uses: docker/login-action@v2
        with:
          # Note: Don't forget to modify "example.com"
          registry: example.com
          # Note: The username depends on the private registry implementation. It can be a username or an email.
          username: ${{ secrets.ACC_EMAIL }}
          # Note: The password depends on the private registry implementation. It can be a token, API key, or an actual password.
          password: ${{ secrets.PASSWORD_REGISTRY }}

      - name: Build and push Docker image to Private Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          # Note: By default, the architecture is linux/amd64,linux/arm64 because Sonic JSON requires amd64,arm64 (see https://github.com/bytedance/sonic).
          # Tip: If your cloud provider supports multi-architecture nodes for your cluster, it will be great for smooth sailing ⛵ ☸ (HPA + Cluster Autoscaling/Autopilot).
          platforms: linux/amd64,linux/arm64
          # Note: Don't forget to modify "example.com", also "build-args" This is part of Variables Management, which is also supported in Gitea.
          # Other build-args (e.g., ${{ github.repository_owner }}) are also supported in Gitea. I've personally used them for end-to-end testing, sandbox development, and production on my Kubernetes cluster ⛵ ☸ (e.g., https://git.b0zal.io).
          tags: |
            example.com/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:${{ github.ref_name }}
            example.com/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:latest
          build-args: |
            TAG=${{ vars.TAG }}
            VENDOR=${{ github.repository_owner }}
            REPO=${{ github.repository }}
            VERSION=${{ github.ref_name }}
            SHA=${{ github.sha }}
