# REST API Ingress Controller Configuration [Zer0 Downtime] by H0llyW00dzZ for an external load balancer running in K8S.
#
# Important: When using Private CAs, it's recommended to implement an external handler (e.g., Cloudflare).
# The external handler should use Public CAs and trust the private CA roots from the backend service.
#
# For Cloudflare, refer to:
#  - https://developers.cloudflare.com/ssl/edge-certificates/advanced-certificate-manager/
#  - https://developers.cloudflare.com/ssl/origin-configuration/custom-origin-trust-store/
#  - https://developers.cloudflare.com/ssl/edge-certificates/custom-certificates/
#
# Example architecture:
# Frontend (External Handler, e.g., Cloudflare) -> Backend (This Repo)
#
# For Public CAs, a Wildcard certificate is required instead of SNI.
#
# Example public wildcard CAs that can be used for this ingress:
#  - https://crt.sh/?q=a8bc9093e1f4ba202fc769b8818b8a279a5f70c91bee458d29d6ad3c5ac5e88c
#
# Demo:
#  - https://api-beta.btz.pm/ (This Repo, you can see the favicon and X-Connection-Hash (Priv8 Implementation), old site is down due to SSL not being configured)
#
# Once the frontend and backend are connected, management (e.g., traffic, security, etc.) becomes easier through the frontend
# (e.g., no need to spend time on setup, traffic maintenance, and other tasks).
#
# Also, note that for the deployment/app/service related to this repository (REST API Boilerplate), don't forget to set HPA (Horizontal Pod Autoscaler) with CPU and Memory.
# Start with a minimum of 1 pod. Additionally, while idle, the average memory usage of this repository (REST API Boilerplate) is between 10MB and 15MB, sometimes even under 10MB (the power of Fiber's zer0-allocation).
#
# Acknowledgement: Regarding autoscaler, due to Fiber's built-in zer0-allocation and the repository's reliance on network-related connections to MySQL and Redis/Valey (most important, if possible, considering 0ms latency, which would be epic),
# VPA (Vertical Pod Autoscaler) is also accepted and suitable as well (e.g., for starter or small operation/request scenarios).
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rest-api-ingress # change this
  annotations:
    kubernetes.io/ingress.class: "nginx"
    # nginx.ingress.kubernetes.io/ssl-passthrough: "true"  # Removed
    nginx.ingress.kubernetes.io/ssl-certificate: "localhost-tls" # change this
    nginx.ingress.kubernetes.io/ssl-certificate-key: "localhost-tls" # change this
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.3" # This should be work explicit TLSv1.3 for all cloud provider
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    # Note: Explicit Nginx Ingress HTTP/3 is currently disabled because the original/default Kubernetes Nginx Ingress won't work unless it already has the Nginx HTTP/3 experimental module.
    # List of well-known cloud providers where HTTP/3 can work properly:
    # - Google Cloud (GKE)
    # nginx.ingress.kubernetes.io/http2: "false" # Enable / Disable HTTP/2 (Optional)
    # nginx.ingress.kubernetes.io/http3: "true" # Enable / Disable HTTP/3 (Optional, However it is recommended for HTMX Frontend)
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS" # Use HTTPS for backend communication (Optional, recommended to use priv8 CAs for this)
spec:
  ingressClassName: nginx
  rules:
    - host: localhost # change this
      http:
        paths:
          # Note: It's important to enable "CaseSensitive" and "StrictRouting" as true in the Fiber configuration (see cmd/server/run.go)
          # then in the middleware, don't forget to configure a "DomainRouter" in RegisterRoutes (see middleware/routes.go)
          - path: /api/v1/ # change this for REST API routes
            pathType: Prefix
            backend:
              service:
                name: rest-api-service # change this
                port:
                  number: 8080 # change this
          - path: / # change this for front-end routes
            pathType: Prefix
            backend:
              service:
                name: rest-api-service # change this for front-end routes
                port:
                  number: 80 # change this
  # Note: TLS is required, and the certificate is optional since I am personally using Private CAs
  tls:
    - hosts:
        - localhost # change this
      secretName: localhost-tls # change this
