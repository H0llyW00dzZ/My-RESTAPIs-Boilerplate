# MySQL Deployment [Zero Downtime] by H0llyW00dzZ for a microservices Kubernetes cluster.
#
# Note: This will automatically create the namespace if it doesn't exist. If the namespace already exists, it won't be affected.
apiVersion: v1
kind: Namespace
metadata:
  name: database
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: mysql-captain-log
value: 90000
globalDefault: false
description: "Priority for MySQL - Keeping the captain's log shipshape! üìö‚öìÔ∏è"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config # Change this to a descriptive name for the MySQL
  namespace: database # Change this to the namespace where the MySQL deployment is located
data:
  # Note: This can be customized, and you can also replace the data directory (see "datadir=/gopher/mysql/data", "/gopher/mysql/data/general.log",
  # "/gopher/mysql/data/slow.log", /gopher/mysql/error.log) Also, the MySQL Logger is not stored in ephemeral storage; it is stored in a PVC (Persistent Volume Claim)
  # for security and safety from compromise.
  #
  # Regarding MySQLTLS and "certificate.cer", it is the server leaf certificate without chaining.
  # In MySQL for SSL/TLS (referred to as MySQLTLS because MySQL uses its own protocol for TLS, not SSL, as TLS and SSL are different),
  # it won't work with TLS certificates typically used for HTTPS (full chain). So, it must be split into two parts: one leaf certificate
  # and the other, "ECC.crt", as the CA certificate (used for issuing the leaf certificate) with the chaining root CA (used for issuing the CA certificate).
  # The ECC "ECC.crt" certificate is the CA certificate issued by the Root CA.
  mysql-args.conf: |
    [mysqld]
    ssl-cert=/etc/mysql/tls/certificate.cer
    ssl-key=/etc/mysql/tls/server-key.pem
    ssl-ca=/etc/mysql/tls/ECC.crt
    ssl-capath=/etc/mysql/
    require_secure_transport=ON
    tls-version=TLSv1.3
    pid-file=/var/run/mysqld/mysqld.pid
    max_connections=2000
    wait_timeout=600
    interactive_timeout=600
    max_connect_errors=10000
    datadir=/gopher/mysql/data
    bind-address=*
    character-set-server=UTF8MB4
    general_log=1
    general_log_file=/gopher/mysql/data/general.log
    slow_query_log=1
    slow_query_log_file=/gopher/mysql/data/slow.log
    long_query_time=10.0
    explicit_defaults_for_timestamp
    authentication_policy='* ,,'
    log_error=/gopher/mysql/error.log
    back_log=500
    open_files_limit=10000
    thread_cache_size=100
# Note: It's recommended to set up a load balancer for MySQL that only allows pods within the cluster to connect to it.
# This is because if the load balancer (e.g., a standalone load balancer) for MySQL is too publicly accessible, it may cause connection errors due to excessive network traffic from outside sources, such as bots attempting to connect through brute-forcing.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql # Change this to a descriptive name for the MySQL
  namespace: database # Change this to the namespace where the MySQL deployment is located
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy:
    # Note: This will use the default RollingUpdateStrategy for maxUnavailable and maxSurge
    # without explicitly specifying them, which is suitable for Auto Pilot, unlike traditional
    # cluster management where they must be explicitly defined.
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      priorityClassName: mysql-captain-log
      containers:
        - name: mysql
          image: <IMAGE_HERE> # Put mysql image here for example "mysql:8.0"
          args:
            - --defaults-file=/etc/mysql/config/mysql-args.conf
            # Note: This is optional.
            # - --skip-mysqlx
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-root-pass
                  key: password
          ports:
            - name: mysql
              containerPort: 3306
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["NET_RAW"]
          resources:
            limits:
              cpu: 500m
              memory: 812Mi
            requests:
              cpu: 250m
              memory: 656Mi
          volumeMounts:
            - name: mysql-ssl
              mountPath: /etc/mysql/tls
            - name: mysql-persistent-storage
              mountPath: /var/run/mysqld
            - name: mysql-config
              mountPath: /etc/mysql/config
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
            - name: mysql-persistent-storage
              mountPath: /database/mysql
      volumes:
        # Note: This can be used with public CAs, for example, a certificate that can be used with a load balancer + MySQL:
        # - https://crt.sh/?q=a8bc9093e1f4ba202fc769b8818b8a279a5f70c91bee458d29d6ad3c5ac5e88c
        #
        # Also note that the MySQL/Database package in the Golang standard library is secure and safe when connecting
        # to this MySQL deployment, even in the case of a Man-in-the-Middle (MitM) attack. When you bind a CA certificate
        # (e.g., the ECC.crt, not a leaf CA) in the MySQL/Database package for TLS, the TLS implementation in the MySQL/Database package of the Golang standard
        # library will first verify the certificate. If everything is valid, it will proceed with the connection. This design
        # supports both private CAs (enterprise, government level) and public CAs that can be used for TLS connections in the MySQL/Database package of the Golang standard library.
        #
        # Additionally, this list includes MySQL drivers that are bound with the sql/database package of the Golang standard library:
        #
        # - https://github.com/go-sql-driver/mysql (Easily set up TLS for MySQL and can be used with private CAs for enterprise/government level)
        # - https://docs.gofiber.io/storage/mysql/ (Easily set up TLS for MySQL and can be used with private CAs for enterprise/government level)
        #
        # For other drivers, especially those that use a connection parameter (e.g., Gorm), it's a bit challenging to set up a TLS connection.
        # So, for other drivers that use a connection parameter (e.g., Gorm), unlike the "go-sql-driver" or "mysql storage fiber" package, it's recommended to use public CAs and then set the prepared statement in the parameter or verify the CA.
        - name: mysql-ssl
          secret:
            secretName: mysql-ssl
        # Note: You have to request storage. It is recommended to use SSD storage + fully encrypted,
        # built-in flexibility which can be attached/detached by the cluster for this.
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-storage
        - name: mysql-config
          configMap:
            name: mysql-config
---
# Note: For MySQL, it's better to use a standalone load balancer and then bind it to a hostname.
# For example, a load balancer in GKE uses an IP, while a load balancer in EKS (AWS) uses a CNAME.
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: database
spec:
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  selector:
    app: mysql
---
# Important: When deploying MySQL in Kubernetes, it's recommended to use VPA (Vertical Pod Autoscaler) instead of HPA (Horizontal Pod Autoscaler).
# MySQL is primarily bound by memory and disk resources, so if using Kubernetes with manual or retain PersistentVolumes, HPA can be used.
# However, if manual or retain PersistentVolumes are not allowed (e.g., due to an existing driver or other restrictions), then VPA is the recommended approach.
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: mysql-vpa # Change this to a descriptive name for the MySQL
  namespace: database # Change this to the namespace where the MySQL deployment is located
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mysql
  updatePolicy:
    updateMode: "Auto"
    # By default, the VPA for global is set to 2
    minReplicas: 1
  resourcePolicy:
   # This specification for the current deployment template (designed for dedicated MySQL)
   # is sufficient for small ~ medium projects or startups managed by Kubernetes.
   # It is recommended not to switch it to stateful, as MySQL is stable in deployment mode by attaching external storage (PVC).
   # If performance is slow, it disk issue.
    containerPolicies:
      - containerName: "mysql"
        minAllowed:
          cpu: 100m
          memory: 100Mi
        maxAllowed:
          cpu: 2
          memory: 2Gi
        controlledResources: ["cpu", "memory"]
