# REST APIs Deployment [Zer0 Downtime] by H0llyW00dzZ for an microservices k8s.
#
# Important: While this deployment is "Stateless" and 100% stable with HPA and CA (Autopilot),
# don't switch to "Stateful" unless you are using Fiber's in-memory storage (see https://docs.gofiber.io/storage/memory_v2.x.x/memory/).
# Also note that when switching the deployment from Stateless -> Stateful, you can't leverage k8s power (e.g., Autopilot, cluster updates, etc.),
# and when using Fiber's in-memory storage, consider using VPA instead of HPA.
#
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: blackpearl-priority
value: 100000
globalDefault: false
description: "Aarrr! Priority for the Black Pearl ‚öìÔ∏èüè¥‚Äç‚ò†Ô∏è - Faster than a kraken on coffee!"
---
# Note: This will automatically create the namespace if it doesn't exist. If the namespace already exists, it won't be affected.
apiVersion: v1
kind: Namespace
metadata:
  name: restapis
# Note: most env here are bound into secrets, so for generate secrets especially if the k8s has "HSM" use bash script "create_k8s_secret.sh"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: restapis
  namespace: restapis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: restapis
  template:
    metadata:
      labels:
        app: restapis
    spec:
      priorityClassName: blackpearl-priority
      containers:
      - name: restapis
        image: <IMAGE_HERE> # Put Image related to this repository here
        # Note: The securityContext section with runAsNonRoot: true might be optional, as the original application (this repository)
        # does not require running with root privileges or rely on root privileges for the operating system or container.
        # It primarily relies on system resources such as vCPU, RAM, Network, and disk space not operating system or container. Thus, this deployment template is secure by default.
        #
        # Note: This setting has been disabled due to issues causing container errors when enabled.
        # whoever enabled it should review the source code (how is it secure) of this repository and fix the underlying problem if it's possible otherwise then disabled.
        # securityContext:
        #   runAsNonRoot: true
        #
        # Note: This should be work, and it wont causing container error.
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["NET_RAW"]
        ports:
        - containerPort: 8080
        resources:
          requests:
            # This is suitable for Cluster Autoscaler (Autopilot) or GKE Autopilot that use nodes with low average specs (e.g., 4 vCPU, 2 vCPU).
            # For example, when the CPU reaches 350m or 500m due to concurrency (e.g., the goroutine workers), the HPA replica count will be around 4 or more.
            # If the replica count reaches 5 or higher, it will cause pending pods, and the Cluster Autoscaler (Autopilot) or GKE Autopilot will attach another node until there are no pending pods.
            # Later, each node (e.g., 5 nodes) will have a CPU under 80%.
            # Also note that this example demonstrates how to handle unpredictable and dynamic CPU and memory resource usage, as it is difficult to predict resource usage accurately, even if you are a genius.
            # For example, both dynamic consumed:
            # NAME                                    CPU(cores)   MEMORY(bytes)
            # senior-golang-worker-75bxc5lxa-lqxcm   274m         29Mi
            # senior-golang-worker-75bxc5lxa-m68zw   283m         53Mi
            # senior-golang-worker-75bxc5lxa-n8nnz   291m         86Mi
            # senior-golang-worker-75bxc5lxa-nt97t   284m         78Mi
            # senior-golang-worker-75bxc5lxa-qczs8   275m         75Mi
            #
            # That dynamic resource usage for each pod is considered stable + suitable for HPA along with Cluster Autoscaler (Autopilot) or GKE Autopilot, unlike static resource usage where when CPU grows, all pods memory remains the same.
            memory: "359Mi"
            cpu: "350m"
          limits:
            # Note: When using HPA with averageUtilization set to 80, the limits will not be affected. 
            # HPA only considers the requests, not the limits. Therefore, it will calculate based on the CPU request of "350m" and memory request of "359Mi".
            # So, this configuration should be fine as is.
            memory: "512Mi"
            cpu: "500m"
        tty: true # Enable TTY for bubble tea
        # Note: These are tips for using HTTPS/TLS with Ingress-Nginx (Same Certs).
        # Make sure you have issued/uploaded the HTTPS/TLS certificates for the Ingress first.
        # Then, in the Ingress configuration, simply pass through SSL, similar to when deploying GitOps (e.g., ArgoCD) with HTTPS in the Ingress.
        #
        # volumeMounts:
        # - mountPath: /etc/tls
        #   name: https-tls
        env:
        # - name: TLS_CERT_FILE
        #   value: /etc/tls/tls.crt
        # - name: TLS_KEY_FILE
        #   value: /etc/tls/tls.key
        - name: PORT
          valueFrom:
            secretKeyRef:
              key: PORT
              name: restapis-env
        - name: APP_NAME
          valueFrom:
            secretKeyRef:
              key: APP_NAME
              name: restapis-env
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              key: DB_HOST
              name: restapis-env
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              key: DB_PORT
              name: restapis-env
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              key: DB_DATABASE
              name: restapis-env
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: DB_USERNAME
              name: restapis-env
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: DB_PASSWORD
              name: restapis-env
        - name: MONITOR_PATH
          valueFrom:
            secretKeyRef:
              key: MONITOR_PATH
              name: restapis-env
        # This optional.
        # - name: DB_ROOT_PASSWORD
        #   secretKeyRef:
        #     valueFrom:
        #         name: restapis-env
        #         key: DB_ROOT_PASSWORD
        - name: RDB_ADDRESS
          valueFrom:
            secretKeyRef:
              key: RDB_ADDRESS
              name: restapis-env
        - name: RDB_PORT
          valueFrom:
            secretKeyRef:
              key: RDB_PORT
              name: restapis-env
        - name: RDB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: RDB_PASSWORD
              name: restapis-env
        - name: RDB_DATABASE
          valueFrom:
            secretKeyRef:
              key: RDB_DATABASE
              name: restapis-env
        - name: TIME_FORMAT
          valueFrom:
            secretKeyRef:
              key: TIME_FORMAT
              name: restapis-env
        - name: WRITE_TIMEOUT
          valueFrom:
            secretKeyRef:
              key: WRITE_TIMEOUT
              name: restapis-env
        - name: READ_TIMEOUT
          valueFrom:
            secretKeyRef:
              key: READ_TIMEOUT
              name: restapis-env
        - name: SHUTDOWN_TIMEOUT
          valueFrom:
            secretKeyRef:
              key: SHUTDOWN_TIMEOUT
              name: restapis-env
        - name: RDB_POOL_TIMEOUT
          valueFrom:
            secretKeyRef:
              key: RDB_POOL_TIMEOUT
              name: restapis-env
        - name: REDIS_MAXCONN_IDLE_TIME
          valueFrom:
            secretKeyRef:
              key: REDIS_MAXCONN_IDLE_TIME
              name: restapis-env
        - name: REDIS_MAXCONN_LIFE_TIME
          valueFrom:
            secretKeyRef:
              key: REDIS_MAXCONN_LIFE_TIME
              name: restapis-env
        - name: DOMAIN
          valueFrom:
            secretKeyRef:
              key: DOMAIN
              name: restapis-env
        - name: API_SUB_DOMAIN
          valueFrom:
            secretKeyRef:
              key: API_SUB_DOMAIN
              name: restapis-env
        - name: MYSQL_CERTS_TLS
          valueFrom:
            secretKeyRef:
              key: MYSQL_CERTS_TLS
              name: restapis-env
        - name: REDIS_CERTS_TLS
          valueFrom:
            secretKeyRef:
              key: REDIS_CERTS_TLS
              name: restapis-env
        # Note: You now need to bind the secrets and set the defaultMode as required.
        # volumes:
        # - name: https-tls
        #   secret:
        #     defaultMode: 420
        #     secretName: restapis-api-tls-secret
---
# Note: When using nginx-ingress for expose service it's better keep like this
apiVersion: v1
kind: Service
metadata:
  name: restapis-service
  namespace: restapis
spec:
  selector:
    app: restapis
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 8080
  # Note: This is optional which is already safe/secure by Ingress-Nginx (example),
  # unless one knows how to set it up (e.g., set up the hostname bound to *.example.com, example.com),
  # and a wildcard certificate is required as it's recommended
  #
  # Example public wildcard CAs that can be used for an ingress or directly:
  # - https://crt.sh/?q=a8bc9093e1f4ba202fc769b8818b8a279a5f70c91bee458d29d6ad3c5ac5e88c
  #
  # Additionally, to enforce HTTPS and enable SSL passthrough (now supported), add the annotation
  # nginx.ingress.kubernetes.io/ssl-passthrough: "true" to the ingress resource. This configuration instructs Nginx
  # to send encrypted traffic directly to the restapis service, which handles the decryption. Implementing SSL passthrough
  # can lead to improved throughput. This is especially true since restapis with Fiber leverages ECC, which has been proven to be
  # significantly faster and more capable of managing a large number of concurrent requests than Nginx (bottleneck) with ECC.
  #
  # - name: https
  #   port: 443
  #   protocol: TCP
  #   targetPort: 8080
  # Note: The timeoutSeconds can be customized, which is a good choice for QoS: Burstable pods that handle concurrency and maintain session affinity
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
# Note: This HPA is designed for microservices that consume vCPU & Memory (Optional for memory).
---
# TIPS: When running on Kubernetes without auto-pilots, it's advisable to install the Cluster Autoscaler (CA) from https://github.com/kubernetes/autoscaler/tree/master/cluster-autoscaler.
# To save costs with any cloud provider, use a small server specification (e.g., 2 vCPU, 4GB RAM), and set the maximum number of nodes to 2 or 4, starting from 1.
# Additionally, this deployment template is designed for smooth sailing ‚õµ ‚ò∏ at high scalability, especially with nginx-ingress and 100% zero downtime.
# Without CA (Auto-Pilots), the experience may not be as smooth, as manual configuration is typically required (similar to traditional cluster management hahaha).
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: restapis-hpa
  namespace: restapis
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: restapis
  minReplicas: 1
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    # Now both can grow dynamically, highly stable for extreme scalability
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
